<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">


	<!-- <bean id="tv" class="polymorphism.SamsungTV"></bean> -->
	<!-- <bean id="lgtv" class="polymorphism.LgTV"></bean> -->
	
	<!-- <bean class="polymorphism.SamsungTV"></bean> -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod"/> -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" destroy-method="destroyMethod"/> -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" lazy-init="true"/> -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="singleton"/>싱글톤 패턴은 메모리에 객체가 1개만 생기고 복사하는형태 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="prototype"/>bean이 요청될때마다 매번 새로운 객체를 생성하여 반환 -->
	
	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<!-- ############################ before ############################## -->
	<bean id="before" class="com.springbook.biz.common.BeforeAdvice"/>
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" 
				      id="allPointcut"/>
		
		<aop:aspect ref="before">
			<aop:before method="beforeLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
	</aop:config>
	
	<!-- ############################ after ############################## -->
	<bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
		
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/>
		
		<aop:aspect ref="log">
			<aop:after method="printLog" pointcut-ref="getPointcut"/>
		</aop:aspect>
	</aop:config>
	
	<!-- ############################ afterReturning ############################## -->
	<bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"></bean>
	<aop:config>
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>
		
		<aop:aspect ref="afterReturning">
			<aop:after-returning method="afterLog" pointcut-ref="getPointcut"/>
		</aop:aspect>
	</aop:config>
	
	<!-- ############################ afterThrowing ############################## -->
	<bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
	<bean id="after" class="com.springbook.biz.common.AfterAdvice"></bean>
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
		
		<aop:aspect ref="afterThrowing">
			<aop:after-returning method="exceptionLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
		
		<aop:aspect ref="after">
			<aop:after method="finallyLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
	</aop:config>
	
	
	<!-- <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO"/>
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" /> -->
	
</beans>
